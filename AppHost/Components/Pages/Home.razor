@page "/"
@using TruckStore.Application.Cart.Create
@using TruckStore.Domain.Cart
@using TruckStore.Infrastructure.Repository
@rendermode InteractiveServer
@inject IServiceScopeFactory ScopeFactory
@inject IMapper Mapper
@inject IMediator Mediator
@inject NavigationManager navigationManager

<PageTitle>Trucks</PageTitle>
@if (trucklist.Count == 0)
{
    <h3>No truck are currently avaible</h3>
}
else if (trucklist == null)
{
    <h3>Loading...</h3>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Model</th>
                <th>Brand</th>
                <th>Max speed</th>
                <th>Max lifting capacity</th>
                <th class="text-center">Price</th>
                <th>Release Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var truck in trucklist)
            {
                var brand = brandlist.Find(b => b.Id == truck.BrandId);
                <tr class="">
                    <td>@truck.Model</td>
                    <td>@brand.Name</td>
                    <td>@truck.maxSpeed</td>
                    <td>@truck.maxLiftingCapacity</td>
                    <td class="text-center">@truck.Price.ToString("C3", us)</td>
                    <td>@truck.ReleaseDate</td>
                    <td>
                        <div>
                            <button class="btn btn-success" @onclick="() => AddToCart(truck)"><i class="bi bi-plus-square"></i></button>
                            <a class="btn btn-primary" role="button" href="/add/@truck.Id"><i class="bi bi-pencil-square"></i></a>
                            <a class="btn btn-danger" role="button" href="/delete/@truck.Id"><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-2">
    <a class="btn btn-primary" role="button" href="/add">Add truck</a>
</div>

@code {
    List<Truck> trucklist = new List<Truck>();

    List<Brand> brandlist = new List<Brand>();

    CultureInfo us = new CultureInfo("en-US");

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        hubConnection = new HubConnectionBuilder().WithUrl(navigationManager.ToAbsoluteUri("/truckHub")).WithAutomaticReconnect().Build();
        hubConnection.On<TruckChangedMessage>("ReceiveTruckChange", onTruckChanged);

        await hubConnection.StartAsync();
    }

    public async Task AddToCart(Truck truck)
    {
        await Mediator.Send(new CreateBuyItemCommand(
            ItemId: Guid.NewGuid(),
            Quantity: 1,
            TruckId: truck.Id
    ));
    }

    public async Task LoadData()
    {
        using var scope = ScopeFactory.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var mapper = scope.ServiceProvider.GetRequiredService<IMapper>();

        var brandlist1 = await mediator.Send(new GetBrandsQuery());
        brandlist = mapper.Map<List<Brand>>(brandlist1);
        var trucklist1 = await mediator.Send(new GetTruckQuery());
        trucklist = mapper.Map<List<Truck>>(trucklist1);

        this.StateHasChanged();
    }

    private void onTruckChanged(TruckChangedMessage message)
    {
        if (trucklist == null) return;

        switch (message.Kind)
        {
            case KindOfChanges.Created:
                if (!trucklist.Any(t => t.Id == message.id) && message.Data != null)
                {
                    var truck = Mapper.Map<Truck>(message.Data);
                    trucklist.Add(truck);
                }
                break;

            case KindOfChanges.Updated:
                var i = trucklist.FindIndex(t => t.Id == message.id);
                if (message != null)
                {
                    var truck = Mapper.Map<Truck>(message.Data);
                    trucklist[i] = truck;
                }
                break;

            case KindOfChanges.Deleted:
                trucklist.RemoveAll(t => t.Id == message.id);
                break;
        }

        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}